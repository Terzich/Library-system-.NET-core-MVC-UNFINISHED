// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PodaciBiblioteke;

namespace PodaciBiblioteke.Migrations
{
    [DbContext(typeof(BibliotekaContext))]
    [Migration("20191028204523_DodavanjeEntiteta")]
    partial class DodavanjeEntiteta
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PodaciBiblioteke.Modeli.Djelo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojKopija")
                        .HasColumnType("int");

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Godina")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoslovnicaBibliotekeID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("UrlSlike")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PoslovnicaBibliotekeID");

                    b.HasIndex("StatusID");

                    b.ToTable("Djelo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Djelo");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.Dolasci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumOdjave")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPrijave")
                        .HasColumnType("datetime2");

                    b.Property<int>("DjeloID")
                        .HasColumnType("int");

                    b.Property<int?>("KarticaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DjeloID");

                    b.HasIndex("KarticaId");

                    b.ToTable("Dolasci");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.HistorijaDolazaka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumOdjave")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPrijave")
                        .HasColumnType("datetime2");

                    b.Property<int>("DjeloID")
                        .HasColumnType("int");

                    b.Property<int>("KarticaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DjeloID");

                    b.HasIndex("KarticaId");

                    b.ToTable("HistorijeDolazaka");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.Kartica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Naknade")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Kartice");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.Klijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrojTelefona")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KarticaId")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrenutnaBibliotekaID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KarticaId");

                    b.HasIndex("TrenutnaBibliotekaID");

                    b.ToTable("Klijent");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.PoslovnicaBiblioteke", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumOtvaranja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlSlike")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Poslovnice");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.RadnoVrijemePoslovnice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DanUSedmici")
                        .HasColumnType("int");

                    b.Property<int?>("PoslovnicaID")
                        .HasColumnType("int");

                    b.Property<int>("VrijemeOtvaranja")
                        .HasColumnType("int");

                    b.Property<int>("VrijemeZatvaranja")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PoslovnicaID");

                    b.ToTable("RadnoVrijemePoslovnica");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Statusi");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.ZahtjevZaIznajmljivanje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumPodnosenjaZahtjeva")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DjeloID")
                        .HasColumnType("int");

                    b.Property<int?>("KarticaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DjeloID");

                    b.HasIndex("KarticaId");

                    b.ToTable("ZahtjeviZaIznajmljivanje");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.Knjiga", b =>
                {
                    b.HasBaseType("PodaciBiblioteke.Modeli.Djelo");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeweyIndex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Knjiga");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.Video", b =>
                {
                    b.HasBaseType("PodaciBiblioteke.Modeli.Djelo");

                    b.Property<string>("Reziser")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.Djelo", b =>
                {
                    b.HasOne("PodaciBiblioteke.Modeli.PoslovnicaBiblioteke", "PoslovnicaBiblioteke")
                        .WithMany("Djela")
                        .HasForeignKey("PoslovnicaBibliotekeID");

                    b.HasOne("PodaciBiblioteke.Modeli.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.Dolasci", b =>
                {
                    b.HasOne("PodaciBiblioteke.Modeli.Djelo", "Djelo")
                        .WithMany()
                        .HasForeignKey("DjeloID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PodaciBiblioteke.Modeli.Kartica", "Kartica")
                        .WithMany("Dolasci")
                        .HasForeignKey("KarticaId");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.HistorijaDolazaka", b =>
                {
                    b.HasOne("PodaciBiblioteke.Modeli.Djelo", "Djelo")
                        .WithMany()
                        .HasForeignKey("DjeloID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PodaciBiblioteke.Modeli.Kartica", "Kartica")
                        .WithMany()
                        .HasForeignKey("KarticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.Klijent", b =>
                {
                    b.HasOne("PodaciBiblioteke.Modeli.Kartica", "Kartica")
                        .WithMany()
                        .HasForeignKey("KarticaId");

                    b.HasOne("PodaciBiblioteke.Modeli.PoslovnicaBiblioteke", "TrenutnaBiblioteka")
                        .WithMany("Klijenti")
                        .HasForeignKey("TrenutnaBibliotekaID");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.RadnoVrijemePoslovnice", b =>
                {
                    b.HasOne("PodaciBiblioteke.Modeli.PoslovnicaBiblioteke", "Poslovnica")
                        .WithMany()
                        .HasForeignKey("PoslovnicaID");
                });

            modelBuilder.Entity("PodaciBiblioteke.Modeli.ZahtjevZaIznajmljivanje", b =>
                {
                    b.HasOne("PodaciBiblioteke.Modeli.Djelo", "Djelo")
                        .WithMany()
                        .HasForeignKey("DjeloID");

                    b.HasOne("PodaciBiblioteke.Modeli.Kartica", "Kartica")
                        .WithMany()
                        .HasForeignKey("KarticaId");
                });
#pragma warning restore 612, 618
        }
    }
}
